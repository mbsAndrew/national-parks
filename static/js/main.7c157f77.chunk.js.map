{"version":3,"sources":["serviceWorker.js","Components/AutoComplete.js","Home.js","ParkPage.js","Expanded.js","Main.js","index.js"],"names":["Boolean","window","location","hostname","match","AutoComplete","onChange","e","options","props","userInput","currentTarget","value","filteredOptions","filter","f","toLowerCase","indexOf","i","setState","actionOption","showOptions","onKeyDown","state","keyCode","showSuggestions","length","getOptionList","optionList","activeOption","className","map","optionName","index","key","onClick","filtered","this","type","React","Component","Home","initData","newData","parkData","m","data","process","baseURL","console","log","onSubmit","validate","ParkPage","parkCode","pathname","split","pop","fetch","then","hasData","alt","src","Expanded","Main","to","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c157f77.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nclass AutoComplete extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            actionOption: 0,\r\n            filtered: [],\r\n            showOptions: false,\r\n            userInput: \"\"\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const { options } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n        const filteredOptions = options.filter(f => {\r\n            return f.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        }).filter((f, i) => i < 4);\r\n\r\n        this.setState({\r\n            actionOption: 0,\r\n            filteredOptions,\r\n            showOptions: true,\r\n            userInput\r\n        });\r\n    }\r\n\r\n    onKeyDown = (e) => {\r\n        const { actionOption, filteredOptions } = this.state;\r\n        if (e.keyCode === 13) {\r\n            this.setState({\r\n                actionOption: 0,\r\n                showSuggestions: false,\r\n                userInput: filteredOptions[actionOption]\r\n            });\r\n        } else if (e.keyCode === 38) {\r\n            if (actionOption === 0) {\r\n                return false\r\n            };\r\n\r\n            this.setState({\r\n                actionOption: actionOption - 1\r\n            })\r\n        } else if (e.keyCode === 40) {\r\n            if (actionOption - 1 === filteredOptions.length) {\r\n                return;\r\n            }\r\n            this.setState({\r\n                actionOption: actionOption + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    getOptionList = () => {\r\n        const { showOptions, userInput, filteredOptions, activeOption } = this.state;\r\n        let optionList;\r\n        if (showOptions && userInput) {\r\n            if (filteredOptions.length) {\r\n                optionList = (\r\n                    <ul className=\"options\">\r\n                        {filteredOptions.map((optionName, index) => {\r\n                            let className;\r\n                            if (index === activeOption) {\r\n                                className = 'option-active';\r\n                            }\r\n                            return (\r\n                                <li className={className} key={optionName} onClick={() => {}}>\r\n                                    {optionName}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                optionList = (\r\n                    <div className=\"no-options\">\r\n                        <em>No Option!</em>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            \r\n        }\r\n        return optionList;        \r\n    }\r\n\r\n    render() {\r\n        const { userInput } = this.state;\r\n        const optionList = this.getOptionList();        \r\n        \r\n        return (\r\n            <>\r\n                <div className={\"search-bar\"}>\r\n                    <input\r\n                        type={\"text\"}\r\n                        className={\"search-box\"}\r\n                        onChange={this.onChange}\r\n                        onKeyDown={this.onKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    <input type={\"submit\"} value={\"Search\"} className={\"search-btn\"} />\r\n                    {optionList}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoComplete;","import React from 'react';\r\nimport parkData from './data/parkData.json';\r\nimport AutoComplete from './Components/AutoComplete';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.key = process.env.REACT_APP_API_KEY;\r\n        this.baseURL = \"https://developer.nps.gov/api/v1\"\r\n        this.state = {\r\n            data: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initData();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //check\r\n    }\r\n\r\n    initData = () => {\r\n        const newData = parkData.map(m => m[\"Location Name\"]);\r\n        this.setState({\r\n            data: newData\r\n        });\r\n        // fetch(`https://developer.nps.gov/api/v1/parks?parkCard=acad&api_key=${this.key}`, {\r\n        //     \"method\": \"GET\",\r\n        //     \"headers\": {\r\n        //         \"Authorization\": this.key\r\n        //     }\r\n        // })\r\n        // .then(res => res.json())\r\n        // .then(data => {\r\n        //     console.log(data);\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.state;\r\n        console.log(data);\r\n        console.log(this.props);\r\n        return (\r\n            <>\r\n              {data &&\r\n                    <form onSubmit={this.validate}>                    \r\n                    <AutoComplete\r\n                        options={data}\r\n                    />\r\n                    </form>\r\n              }              \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass ParkPage extends React.Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            hasData: false\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.initData();\r\n    }\r\n\r\n    initData = () => {\r\n        const parkCode = window.location.pathname.split(\"/\").pop();\r\n        fetch(`https://national-parks-api.herokuapp.com/info/${parkCode}`)\r\n        .then(data => {\r\n            console.log(data);\r\n            this.setState({\r\n                hasData: true\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { hasData } = this.state;\r\n        return (\r\n            <>\r\n            {hasData ? \r\n              <div>\r\n                  <img alt=\"Acadia\" src={\"https://loadedlandscapes.com/wp-content/uploads/2017/06/main-6-1280x720.jpg\"} />\r\n              </div>\r\n            : \"No data son!\"}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ParkPage;","import React from 'react';\r\n\r\nclass Expanded extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                Expanded\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Expanded;","import React from 'react';\r\nimport { Route, NavLink, HashRouter } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport ParkPage from './ParkPage';\r\nimport Expanded from './Expanded';\r\n\r\nclass Main extends React.Component {\r\n    render() {        \r\n        return (            \r\n            <HashRouter>\r\n            <>\r\n                <h1>Sample</h1>\r\n                <h1>Simple SPA</h1>\r\n                <ul className=\"header\">\r\n                    <li><NavLink to=\"/\">Home</NavLink></li>\r\n                    <li><NavLink to=\"/info\">Stuff</NavLink></li>\r\n                    <li><NavLink to=\"/expanded\">Contact</NavLink></li>\r\n                </ul>\r\n                <div className=\"content\">\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    <Route path=\"/info\" component={ParkPage} />\r\n                    <Route path=\"/expanded\" component={Expanded} />\r\n                </div>\r\n            </>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './Main';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}